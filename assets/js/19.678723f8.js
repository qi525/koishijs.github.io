(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{432:function(e,t,a){"use strict";a.r(t);var v=a(25),s=Object(v.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"数据库"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数据库"}},[e._v("#")]),e._v(" 数据库 (Database)")]),e._v(" "),a("h2",{attrs:{id:"全局接口"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#全局接口"}},[e._v("#")]),e._v(" 全局接口")]),e._v(" "),a("h3",{attrs:{id:"user-flag-channel-flag"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#user-flag-channel-flag"}},[e._v("#")]),e._v(" User.Flag, Channel.Flag")]),e._v(" "),a("p",[e._v("所有用户 / 频道状态标签构成的枚举类型。参见 "),a("RouterLink",{attrs:{to:"/guide/manage.html#状态标签"}},[e._v("状态标签")]),e._v("。")],1),e._v(" "),a("h3",{attrs:{id:"user-fields-channel-fields"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#user-fields-channel-fields"}},[e._v("#")]),e._v(" User.fields, Channel.fields")]),e._v(" "),a("p",[e._v("所有用户 / 频道字段构成的列表。")]),e._v(" "),a("h3",{attrs:{id:"user-extend"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#user-extend"}},[e._v("#")]),e._v(" User.extend(getter), Channel.extend(getter)")]),e._v(" "),a("p",[e._v("扩展用户 / 频道字段。")]),e._v(" "),a("ul",[a("li",[a("strong",[e._v("getter:")]),e._v(" "),a("code",[e._v("(type: string, id: string) => object")]),e._v(" 新字段的初始化函数，返回值应该是一个由要扩展的字段和它们的默认值构成的键值对")]),e._v(" "),a("li",[e._v("返回值: "),a("code",[e._v("void")])])]),e._v(" "),a("h3",{attrs:{id:"user-create"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#user-create"}},[e._v("#")]),e._v(" User.create(type, id), Channel.create(type, id)")]),e._v(" "),a("p",[e._v("创建一个新用户 / 频道数据对象。")]),e._v(" "),a("ul",[a("li",[a("strong",[e._v("type:")]),e._v(" "),a("code",[e._v("string")]),e._v(" 平台名")]),e._v(" "),a("li",[a("strong",[e._v("id:")]),e._v(" "),a("code",[e._v("string")]),e._v(" 用户 / 频道标识符")]),e._v(" "),a("li",[e._v("返回值: "),a("code",[e._v("User")]),e._v(" / "),a("code",[e._v("Channel")])])]),e._v(" "),a("h3",{attrs:{id:"extenddatabase"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#extenddatabase"}},[e._v("#")]),e._v(" extendDatabase(database, extension)")]),e._v(" "),a("p",[e._v("扩展一个数据库的方法。")]),e._v(" "),a("ul",[a("li",[a("strong",[e._v("database:")]),e._v(" "),a("code",[e._v("string | (new () => Database)")]),e._v(" 要扩展的数据库类；如果传入一个字符串，则会将这个模块的默认导出作为目标类")]),e._v(" "),a("li",[a("strong",[e._v("extension:")]),e._v(" "),a("code",[e._v("Partial<Database>")]),e._v(" 要添加到原型链的方法")])]),e._v(" "),a("h2",{attrs:{id:"数据库对象"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数据库对象"}},[e._v("#")]),e._v(" 数据库对象")]),e._v(" "),a("p",[e._v("一个 Database 对象代理了 Koishi 上下文绑定的应用实例有关的所有数据库访问。同时它具有注入特性，任何插件都可以自己定义数据库上的方法。本章主要介绍数据库的官方接口。注意："),a("strong",[e._v("它们并不由 Koishi 自身实现，而是由每个数据库分别实现的")]),e._v("。Koishi 只是提供了一套标准。")]),e._v(" "),a("h3",{attrs:{id:"db-getuser"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#db-getuser"}},[e._v("#")]),e._v(" db.getUser(type, id, fields?)")]),e._v(" "),a("p",[e._v("向数据库请求用户数据。如果传入的 id 是一个列表，则返回值也应当是一个列表。")]),e._v(" "),a("ul",[a("li",[a("strong",[e._v("type:")]),e._v(" "),a("code",[e._v("string")]),e._v(" 平台名")]),e._v(" "),a("li",[a("strong",[e._v("id:")]),e._v(" "),a("code",[e._v("string | string[]")]),e._v(" 用户标识符")]),e._v(" "),a("li",[a("strong",[e._v("fields:")]),e._v(" "),a("code",[e._v("User.Field[]")]),e._v(" 请求的字段，默认为全部字段")]),e._v(" "),a("li",[e._v("返回值: "),a("code",[e._v("Promise<User | User[]>")]),e._v(" 用户数据")])]),e._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[e._v("提示")]),e._v(" "),a("p",[e._v("尽管这里我们提供了 "),a("code",[e._v("fields")]),e._v(" 参数用于对特定的数据库进行优化，但是如果你是数据库开发者，也完全可以忽略这个参数。只需要保证返回的数据满足用户数据格式，且包含在 "),a("code",[e._v("fields")]),e._v(" 中的字段都存在即可。")])]),e._v(" "),a("h3",{attrs:{id:"db-setuser"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#db-setuser"}},[e._v("#")]),e._v(" db.setUser(type, id, data)")]),e._v(" "),a("h3",{attrs:{id:"db-createuser"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#db-createuser"}},[e._v("#")]),e._v(" db.createUser(type, id, data)")]),e._v(" "),a("h3",{attrs:{id:"db-removeuser"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#db-removeuser"}},[e._v("#")]),e._v(" db.removeUser(type, id)")]),e._v(" "),a("p",[e._v("向数据库修改 / 添加 / 删除用户数据。")]),e._v(" "),a("ul",[a("li",[a("strong",[e._v("type:")]),e._v(" "),a("code",[e._v("string")]),e._v(" 平台名")]),e._v(" "),a("li",[a("strong",[e._v("id:")]),e._v(" "),a("code",[e._v("string")]),e._v(" 用户标识符")]),e._v(" "),a("li",[a("strong",[e._v("data:")]),e._v(" "),a("code",[e._v("User")]),e._v(" 要修改 / 添加的数据")]),e._v(" "),a("li",[e._v("返回值: "),a("code",[e._v("Promise<void>")])])]),e._v(" "),a("h3",{attrs:{id:"db-getchannel"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#db-getchannel"}},[e._v("#")]),e._v(" db.getChannel(type, id, fields?)")]),e._v(" "),a("p",[e._v("向数据库请求频道数据。如果传入的 id 是一个列表，则返回值也应当是一个列表。")]),e._v(" "),a("ul",[a("li",[a("strong",[e._v("type:")]),e._v(" "),a("code",[e._v("string")]),e._v(" 平台名")]),e._v(" "),a("li",[a("strong",[e._v("id:")]),e._v(" "),a("code",[e._v("string | string[]")]),e._v(" 频道标识符")]),e._v(" "),a("li",[a("strong",[e._v("fields:")]),e._v(" "),a("code",[e._v("ChannelField[]")]),e._v(" 请求的字段，默认为全部字段")]),e._v(" "),a("li",[e._v("返回值: "),a("code",[e._v("Promise<Channel | Channel[]>")]),e._v(" 频道数据")])]),e._v(" "),a("h3",{attrs:{id:"db-getchannellist"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#db-getchannellist"}},[e._v("#")]),e._v(" db.getChannelList(fields?, type?, assignees?)")]),e._v(" "),a("p",[e._v("向数据库请求被特定机器人管理的所有频道数据。这里的两个参数可以写任意一个，都可以识别。")]),e._v(" "),a("ul",[a("li",[a("strong",[e._v("fields:")]),e._v(" "),a("code",[e._v("ChannelField[]")]),e._v(" 请求的字段，默认为全部字段")]),e._v(" "),a("li",[a("strong",[e._v("type:")]),e._v(" "),a("code",[e._v("string")]),e._v(" 平台名，默认为全平台")]),e._v(" "),a("li",[a("strong",[e._v("assignees:")]),e._v(" "),a("code",[e._v("string[]")]),e._v(" 代理者列表，默认为当前运行的全部机器人")]),e._v(" "),a("li",[e._v("返回值: "),a("code",[e._v("Promise<Channel[]>")]),e._v(" 频道数据列表")])]),e._v(" "),a("h3",{attrs:{id:"db-setchannel"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#db-setchannel"}},[e._v("#")]),e._v(" db.setChannel(type, id, data)")]),e._v(" "),a("h3",{attrs:{id:"db-createchannel"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#db-createchannel"}},[e._v("#")]),e._v(" db.createChannel(type, id, data)")]),e._v(" "),a("h3",{attrs:{id:"db-removechannel"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#db-removechannel"}},[e._v("#")]),e._v(" db.removeChannel(type, id)")]),e._v(" "),a("p",[e._v("向数据库修改 / 添加 / 删除频道数据。")]),e._v(" "),a("ul",[a("li",[a("strong",[e._v("type:")]),e._v(" "),a("code",[e._v("string")]),e._v(" 平台名")]),e._v(" "),a("li",[a("strong",[e._v("id:")]),e._v(" "),a("code",[e._v("number")]),e._v(" 频道标识符")]),e._v(" "),a("li",[a("strong",[e._v("data:")]),e._v(" "),a("code",[e._v("Channel")]),e._v(" 要修改 / 添加的数据")]),e._v(" "),a("li",[e._v("返回值: "),a("code",[e._v("Promise<void>")])])])])}),[],!1,null,null,null);t.default=s.exports}}]);