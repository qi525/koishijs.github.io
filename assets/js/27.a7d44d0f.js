(window.webpackJsonp=window.webpackJsonp||[]).push([[27],{425:function(a,v,t){"use strict";t.r(v);var _=t(25),e=Object(_.a)({},(function(){var a=this,v=a.$createElement,t=a._self._c||v;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h1",{attrs:{id:"常用工具"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#常用工具"}},[a._v("#")]),a._v(" 常用工具 (Utils)")]),a._v(" "),t("div",{staticClass:"custom-block tip"},[t("p",{staticClass:"custom-block-title"},[a._v("注意")]),a._v(" "),t("p",[a._v("本页显示的版本号都表示对应的 koishi-utils 版本号（而不是对应的 koishi 版本号）。")])]),a._v(" "),t("p",[a._v("包含了被 Koishi 使用的工具函数，它们由 "),t("code",[a._v("koishi-utils")]),a._v(" 包提供。")]),a._v(" "),t("h2",{attrs:{id:"观察者对象"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#观察者对象"}},[a._v("#")]),a._v(" 观察者对象")]),a._v(" "),t("h3",{attrs:{id:"observe"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#observe"}},[a._v("#")]),a._v(" observe(target, update?, label?)")]),a._v(" "),t("p",[a._v("创建一个观察者对象。目前只支持从普通对象创建（不支持 Array / Set / Map）。")]),a._v(" "),t("ul",[t("li",[t("strong",[a._v("target:")]),a._v(" "),t("code",[a._v("T extends object")]),a._v(" 要观测的对象")]),a._v(" "),t("li",[t("strong",[a._v("update:")]),a._v(" "),t("code",[a._v("(diff: Partial<T>) => R")]),a._v(" 更新回调函数")]),a._v(" "),t("li",[t("strong",[a._v("label:")]),a._v(" "),t("code",[a._v("string")]),a._v(" 对象的标签，用于标识")]),a._v(" "),t("li",[a._v("返回值: "),t("code",[a._v("Observed<T>")])])]),a._v(" "),t("h3",{attrs:{id:"observed-diff"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#observed-diff"}},[a._v("#")]),a._v(" observed._diff")]),a._v(" "),t("p",[a._v("观察者当前的对象变化。")]),a._v(" "),t("h3",{attrs:{id:"observed-merge"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#observed-merge"}},[a._v("#")]),a._v(" observed._merge(source)")]),a._v(" "),t("p",[a._v("将某些属性合并入当前观察者，不会触发 diff 更新。")]),a._v(" "),t("ul",[t("li",[t("strong",[a._v("source:")]),a._v(" "),t("code",[a._v("object")]),a._v(" 要合并的对象")]),a._v(" "),t("li",[a._v("返回值: "),t("code",[a._v("this")])])]),a._v(" "),t("h3",{attrs:{id:"observed-update"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#observed-update"}},[a._v("#")]),a._v(" observed._update()")]),a._v(" "),t("p",[a._v("更新观察者对象，同时清除 diff。")]),a._v(" "),t("ul",[t("li",[a._v("返回值: "),t("code",[a._v("R")])])]),a._v(" "),t("h2",{attrs:{id:"字符串操作"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#字符串操作"}},[a._v("#")]),a._v(" 字符串操作")]),a._v(" "),t("h3",{attrs:{id:"simplify"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#simplify"}},[a._v("#")]),a._v(" simplify(source)")]),a._v(" "),t("p",[a._v("繁体转简体。")]),a._v(" "),t("ul",[t("li",[t("strong",[a._v("source:")]),a._v(" "),t("code",[a._v("string")]),a._v(" 源文本")]),a._v(" "),t("li",[a._v("返回值: "),t("code",[a._v("string")]),a._v(" 简体文本")])]),a._v(" "),t("h3",{attrs:{id:"traditionalize"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#traditionalize"}},[a._v("#")]),a._v(" traditionalize(source)")]),a._v(" "),t("p",[a._v("简体转繁体。")]),a._v(" "),t("ul",[t("li",[t("strong",[a._v("source:")]),a._v(" "),t("code",[a._v("string")]),a._v(" 源文本")]),a._v(" "),t("li",[a._v("返回值: "),t("code",[a._v("string")]),a._v(" 繁体文本")])]),a._v(" "),t("h3",{attrs:{id:"capitalize"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#capitalize"}},[a._v("#")]),a._v(" capitalize(source)")]),a._v(" "),t("p",[a._v("首字母大写。")]),a._v(" "),t("ul",[t("li",[t("strong",[a._v("source:")]),a._v(" "),t("code",[a._v("string")]),a._v(" 源文本")]),a._v(" "),t("li",[a._v("返回值: "),t("code",[a._v("string")]),a._v(" 首字母大写后的文本")])]),a._v(" "),t("h3",{attrs:{id:"camelcase"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#camelcase"}},[a._v("#")]),a._v(" camelCase(source)")]),a._v(" "),t("p",[a._v("如果输入的是字符串，则将字符串转换成 camelCase；如果是数组或对象，则递归地将对象中的每个（可枚举）的键转换成 camelCase；其他情况不受影响。")]),a._v(" "),t("ul",[t("li",[t("strong",[a._v("source:")]),a._v(" "),t("code",[a._v("any")]),a._v(" 要转换的内容")]),a._v(" "),t("li",[a._v("返回值: "),t("code",[a._v("any")]),a._v(" 转换结果")])]),a._v(" "),t("h3",{attrs:{id:"paramcase"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#paramcase"}},[a._v("#")]),a._v(" paramCase(source)")]),a._v(" "),t("p",[a._v("如果输入的是字符串，则将字符串转换成 param-case；如果是数组或对象，则递归地将对象中的每个（可枚举）的键转换成 param-case；其他情况不受影响。")]),a._v(" "),t("ul",[t("li",[t("strong",[a._v("source:")]),a._v(" "),t("code",[a._v("any")]),a._v(" 要转换的内容")]),a._v(" "),t("li",[a._v("返回值: "),t("code",[a._v("any")]),a._v(" 转换结果")])]),a._v(" "),t("h3",{attrs:{id:"snakecase"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#snakecase"}},[a._v("#")]),a._v(" snakeCase(source)")]),a._v(" "),t("p",[a._v("如果输入的是字符串，则将字符串转换成 snake_case；如果是数组或对象，则递归地将对象中的每个（可枚举）的键转换成 snake_case；其他情况不受影响。")]),a._v(" "),t("ul",[t("li",[t("strong",[a._v("source:")]),a._v(" "),t("code",[a._v("any")]),a._v(" 要转换的内容")]),a._v(" "),t("li",[a._v("返回值: "),t("code",[a._v("any")]),a._v(" 转换结果")])]),a._v(" "),t("h2",{attrs:{id:"模板操作"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#模板操作"}},[a._v("#")]),a._v(" 模板操作")]),a._v(" "),t("h3",{attrs:{id:"template"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#template"}},[a._v("#")]),a._v(" template(path, ...params)")]),a._v(" "),t("p",[a._v("根据模板路径返回插值后的字符串。如果路径不存在将会返回路径本身。")]),a._v(" "),t("ul",[t("li",[t("strong",[a._v("path:")]),a._v(" "),t("code",[a._v("string")]),a._v(" 模板路径")]),a._v(" "),t("li",[t("strong",[a._v("params:")]),a._v(" "),t("code",[a._v("any[]")]),a._v(" 参数列表")]),a._v(" "),t("li",[a._v("返回值: "),t("code",[a._v("string")]),a._v(" 生成的字符串")])]),a._v(" "),t("h3",{attrs:{id:"template-set"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#template-set"}},[a._v("#")]),a._v(" template.set(path, value)")]),a._v(" "),t("p",[a._v("定义模板字符串。如果 "),t("code",[a._v("value")]),a._v(" 是一个对象，则会将 "),t("code",[a._v("path")]),a._v(" 作为前缀添加到每个路径中。")]),a._v(" "),t("ul",[t("li",[t("strong",[a._v("path:")]),a._v(" "),t("code",[a._v("string")]),a._v(" 模板路径")]),a._v(" "),t("li",[t("strong",[a._v("value:")]),a._v(" "),t("code",[a._v("string | object")]),a._v(" 模板字符串")]),a._v(" "),t("li",[a._v("返回值: "),t("code",[a._v("void")])])]),a._v(" "),t("h3",{attrs:{id:"template-get"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#template-get"}},[a._v("#")]),a._v(" template.get(path)")]),a._v(" "),t("p",[a._v("根据模板路径返回模板字符串。如果路径不存在将会返回路径本身。")]),a._v(" "),t("ul",[t("li",[t("strong",[a._v("path:")]),a._v(" "),t("code",[a._v("string")]),a._v(" 模板路径")]),a._v(" "),t("li",[a._v("返回值: "),t("code",[a._v("string")]),a._v(" 模板字符串")])]),a._v(" "),t("h3",{attrs:{id:"template-format"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#template-format"}},[a._v("#")]),a._v(" template.format(source, ...params)")]),a._v(" "),t("p",[a._v("使用模板语法插值。")]),a._v(" "),t("ul",[t("li",[t("strong",[a._v("source:")]),a._v(" "),t("code",[a._v("string")]),a._v(" 模板字符串")]),a._v(" "),t("li",[t("strong",[a._v("params:")]),a._v(" "),t("code",[a._v("any[]")]),a._v(" 参数列表")]),a._v(" "),t("li",[a._v("返回值: "),t("code",[a._v("string")]),a._v(" 生成的字符串")])]),a._v(" "),t("h2",{attrs:{id:"集合操作"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#集合操作"}},[a._v("#")]),a._v(" 集合操作")]),a._v(" "),t("h3",{attrs:{id:"contain"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#contain"}},[a._v("#")]),a._v(" contain(array1, array2)")]),a._v(" "),t("p",[a._v("检测集合的包含关系。")]),a._v(" "),t("ul",[t("li",[t("strong",[a._v("array1:")]),a._v(" "),t("code",[a._v("readonly any[]")]),a._v(" 数组 1")]),a._v(" "),t("li",[t("strong",[a._v("array2:")]),a._v(" "),t("code",[a._v("readonly any[]")]),a._v(" 数组 2")]),a._v(" "),t("li",[a._v("返回值: "),t("code",[a._v("boolean")]),a._v(" 数组 1 是否包含数组 2 的全部元素")])]),a._v(" "),t("h3",{attrs:{id:"intersection"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#intersection"}},[a._v("#")]),a._v(" intersection(array1, array2)")]),a._v(" "),t("p",[a._v("求两个集合的交集。")]),a._v(" "),t("ul",[t("li",[t("strong",[a._v("array1:")]),a._v(" "),t("code",[a._v("readonly any[]")]),a._v(" 数组 1")]),a._v(" "),t("li",[t("strong",[a._v("array2:")]),a._v(" "),t("code",[a._v("readonly any[]")]),a._v(" 数组 2")]),a._v(" "),t("li",[a._v("返回值: "),t("code",[a._v("any[]")]),a._v(" 两个数组的交集")])]),a._v(" "),t("h3",{attrs:{id:"difference"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#difference"}},[a._v("#")]),a._v(" difference(array1, array2)")]),a._v(" "),t("p",[a._v("求两个集合的差集。")]),a._v(" "),t("ul",[t("li",[t("strong",[a._v("array1:")]),a._v(" "),t("code",[a._v("readonly any[]")]),a._v(" 数组 1")]),a._v(" "),t("li",[t("strong",[a._v("array2:")]),a._v(" "),t("code",[a._v("readonly any[]")]),a._v(" 数组 2")]),a._v(" "),t("li",[a._v("返回值: "),t("code",[a._v("any[]")]),a._v(" 两个数组的差集")])]),a._v(" "),t("h3",{attrs:{id:"union"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#union"}},[a._v("#")]),a._v(" union(array1, array2)")]),a._v(" "),t("p",[a._v("求两个集合的并集。")]),a._v(" "),t("ul",[t("li",[t("strong",[a._v("array1:")]),a._v(" "),t("code",[a._v("readonly any[]")]),a._v(" 数组 1")]),a._v(" "),t("li",[t("strong",[a._v("array2:")]),a._v(" "),t("code",[a._v("readonly any[]")]),a._v(" 数组 2")]),a._v(" "),t("li",[a._v("返回值: "),t("code",[a._v("any[]")]),a._v(" 两个数组的并集")])]),a._v(" "),t("h2",{attrs:{id:"日期操作"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#日期操作"}},[a._v("#")]),a._v(" 日期操作")]),a._v(" "),t("h3",{attrs:{id:"静态属性"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#静态属性"}},[a._v("#")]),a._v(" 静态属性")]),a._v(" "),t("ul",[t("li",[a._v("Time.millisecond")]),a._v(" "),t("li",[a._v("Time.second")]),a._v(" "),t("li",[a._v("Time.minute")]),a._v(" "),t("li",[a._v("Time.hour")]),a._v(" "),t("li",[a._v("Time.day")]),a._v(" "),t("li",[a._v("Time.week")])]),a._v(" "),t("h3",{attrs:{id:"time-getdatenumber"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#time-getdatenumber"}},[a._v("#")]),a._v(" Time.getDateNumber(date?)")]),a._v(" "),t("p",[a._v("获取当前日期（从 UNIX 时间开始时计算）。")]),a._v(" "),t("ul",[t("li",[t("strong",[a._v("date:")]),a._v(" "),t("code",[a._v("Date")]),a._v(" 日期对象，默认为 "),t("code",[a._v("new Date()")])]),a._v(" "),t("li",[a._v("返回值: "),t("code",[a._v("number")]),a._v(" UNIX 时间开始后的天数")])]),a._v(" "),t("h3",{attrs:{id:"time-fromdatenumber"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#time-fromdatenumber"}},[a._v("#")]),a._v(" Time.fromDateNumber(value)")]),a._v(" "),t("p",[a._v("从 UNIX 时间开始后的天数计算日期对象。")]),a._v(" "),t("ul",[t("li",[t("strong",[a._v("value:")]),a._v(" "),t("code",[a._v("number")]),a._v(" UNIX 时间开始后的天数")]),a._v(" "),t("li",[a._v("返回值: "),t("code",[a._v("Date")]),a._v(" 日期对象")])]),a._v(" "),t("h3",{attrs:{id:"time-parsetime"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#time-parsetime"}},[a._v("#")]),a._v(" Time.parseTime(source)")]),a._v(" "),t("p",[a._v("将一个字符串解析成时间长度。")]),a._v(" "),t("ul",[t("li",[t("strong",[a._v("source:")]),a._v(" "),t("code",[a._v("string")]),a._v(" 要解析的字符串")])]),a._v(" "),t("h3",{attrs:{id:"time-parsedate"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#time-parsedate"}},[a._v("#")]),a._v(" Time.parseDate(source)")]),a._v(" "),t("p",[a._v("将一个字符串解析成 Date 对象。")]),a._v(" "),t("ul",[t("li",[t("strong",[a._v("source:")]),a._v(" "),t("code",[a._v("string")]),a._v(" 要解析的字符串")])]),a._v(" "),t("h3",{attrs:{id:"time-formattime"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#time-formattime"}},[a._v("#")]),a._v(" Time.formatTime(ms)")]),a._v(" "),t("ul",[t("li",[t("strong",[a._v("ms:")]),a._v(" "),t("code",[a._v("number")]),a._v(" 毫秒数")])]),a._v(" "),t("h3",{attrs:{id:"time-formattimeshort"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#time-formattimeshort"}},[a._v("#")]),a._v(" Time.formatTimeShort(ms)")]),a._v(" "),t("ul",[t("li",[t("strong",[a._v("ms:")]),a._v(" "),t("code",[a._v("number")]),a._v(" 毫秒数")])]),a._v(" "),t("h3",{attrs:{id:"time-formattimeinterval"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#time-formattimeinterval"}},[a._v("#")]),a._v(" Time.formatTimeInterval(time, interval?)")]),a._v(" "),t("ul",[t("li",[t("strong",[a._v("time:")]),a._v(" "),t("code",[a._v("Date")]),a._v(" 起始时间")]),a._v(" "),t("li",[t("strong",[a._v("interval:")]),a._v(" "),t("code",[a._v("number")]),a._v(" 时间间隔，单位为毫秒")]),a._v(" "),t("li",[a._v("返回值: "),t("code",[a._v("string")])])]),a._v(" "),t("h2",{attrs:{id:"cqcode-操作"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#cqcode-操作"}},[a._v("#")]),a._v(" CQCode 操作")]),a._v(" "),t("p",[a._v("CQCode 结构如下：")]),a._v(" "),t("panel-view",{staticClass:"code",attrs:{title:""}},[t("pre",{staticClass:"shiki",staticStyle:{"background-color":"#272822"}},[t("code",[t("span",{staticClass:"line"},[t("span",{staticStyle:{color:"#66D9EF"}},[a._v("interface")]),t("span",{staticStyle:{color:"#F8F8F2"}},[a._v(" ")]),t("span",{staticStyle:{color:"#A6E22E"}},[a._v("CQCode")]),t("span",{staticStyle:{color:"#F8F8F2"}},[a._v(" {")])]),a._v("\n"),t("span",{staticClass:"line"},[t("span",{staticStyle:{color:"#F8F8F2"}},[a._v("  type")]),t("span",{staticStyle:{color:"#F92672"}},[a._v(":")]),t("span",{staticStyle:{color:"#F8F8F2"}},[a._v(" ")]),t("span",{staticStyle:{color:"#66D9EF"}},[a._v("string")])]),a._v("\n"),t("span",{staticClass:"line"},[t("span",{staticStyle:{color:"#F8F8F2"}},[a._v("  data")]),t("span",{staticStyle:{color:"#F92672"}},[a._v(":")]),t("span",{staticStyle:{color:"#F8F8F2"}},[a._v(" ")]),t("span",{staticStyle:{color:"#A6E22E"}},[a._v("Record")]),t("span",{staticStyle:{color:"#F8F8F2"}},[a._v("<")]),t("span",{staticStyle:{color:"#66D9EF"}},[a._v("string")]),t("span",{staticStyle:{color:"#F8F8F2"}},[a._v(", ")]),t("span",{staticStyle:{color:"#66D9EF"}},[a._v("string")]),t("span",{staticStyle:{color:"#F8F8F2"}},[a._v(" ")]),t("span",{staticStyle:{color:"#F92672"}},[a._v("|")]),t("span",{staticStyle:{color:"#F8F8F2"}},[a._v(" ")]),t("span",{staticStyle:{color:"#66D9EF"}},[a._v("number")]),t("span",{staticStyle:{color:"#F8F8F2"}},[a._v(">")])]),a._v("\n"),t("span",{staticClass:"line"},[t("span",{staticStyle:{color:"#F8F8F2"}},[a._v("}")])])])])]),t("h3",{attrs:{id:"cqcode-escape"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#cqcode-escape"}},[a._v("#")]),a._v(" CQCode.escape(source, insideCQ?)")]),a._v(" "),t("p",[a._v("转义一段文本到 CQ 码格式。")]),a._v(" "),t("ul",[t("li",[t("strong",[a._v("source:")]),a._v(" "),t("code",[a._v("string")]),a._v(" 源文本")]),a._v(" "),t("li",[t("strong",[a._v("insideCQ:")]),a._v(" "),t("code",[a._v("boolean")]),a._v(" 在 CQ 码内部转义（会额外处理逗号）")]),a._v(" "),t("li",[a._v("返回值: "),t("code",[a._v("string")]),a._v(" 转义过后的文本")])]),a._v(" "),t("h3",{attrs:{id:"cqcode-unescape"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#cqcode-unescape"}},[a._v("#")]),a._v(" CQCode.unescape(souce)")]),a._v(" "),t("p",[a._v("取消一段文本的 CQ 码转义。")]),a._v(" "),t("ul",[t("li",[t("strong",[a._v("source:")]),a._v(" "),t("code",[a._v("string")]),a._v(" 源文本")]),a._v(" "),t("li",[a._v("返回值: "),t("code",[a._v("string")]),a._v(" 转义前的文本")])]),a._v(" "),t("h3",{attrs:{id:"cqcode-stringify"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#cqcode-stringify"}},[a._v("#")]),a._v(" CQCode.stringify(type, data)")]),a._v(" "),t("p",[a._v("将一个对象转化成 CQ 码文本。")]),a._v(" "),t("ul",[t("li",[t("strong",[a._v("type:")]),a._v(" "),t("code",[a._v("string")]),a._v(" CQ 码类型")]),a._v(" "),t("li",[t("strong",[a._v("data:")]),a._v(" "),t("code",[a._v("object")]),a._v(" CQ 码参数")]),a._v(" "),t("li",[a._v("返回值: "),t("code",[a._v("string")]),a._v(" 生成的 CQ 码")])]),a._v(" "),t("div",{staticClass:"custom-block tip"},[t("p",{staticClass:"custom-block-title"},[a._v("注意")]),a._v(" "),t("p",[a._v("类型为 text 的 CQ 码将直接被转化为 "),t("code",[a._v("data.text")]),a._v(" 输出。")])]),a._v(" "),t("h3",{attrs:{id:"cqcode-stringifyall"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#cqcode-stringifyall"}},[a._v("#")]),a._v(" CQCode.stringifyAll(codes)")]),a._v(" "),t("p",[a._v("将多个 CQCode 对象转化成文本并连接。")]),a._v(" "),t("ul",[t("li",[t("strong",[a._v("codes:")]),a._v(" "),t("code",[a._v("CQCode[]")]),a._v(" CQ 码数组")]),a._v(" "),t("li",[a._v("返回值: "),t("code",[a._v("string")]),a._v(" 生成的文本")])]),a._v(" "),t("h3",{attrs:{id:"cqcode-parse"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#cqcode-parse"}},[a._v("#")]),a._v(" CQCode.parse(source)")]),a._v(" "),t("p",[a._v("将一个 CQ 码文本解析成对象。")]),a._v(" "),t("ul",[t("li",[t("strong",[a._v("source:")]),a._v(" "),t("code",[a._v("string")]),a._v(" CQ 码")]),a._v(" "),t("li",[a._v("返回值: "),t("code",[a._v("CQCode")]),a._v(" CQ 码的类型和参数")])]),a._v(" "),t("h3",{attrs:{id:"cqcode-parseall"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#cqcode-parseall"}},[a._v("#")]),a._v(" CQCode.parseAll(source)")]),a._v(" "),t("p",[a._v("解析一段文本内的全部 CQ 码。其中的纯文本将会解析成 text 类型。")]),a._v(" "),t("ul",[t("li",[t("strong",[a._v("source:")]),a._v(" "),t("code",[a._v("string")]),a._v(" 源文本")]),a._v(" "),t("li",[a._v("返回值: "),t("code",[a._v("CQCode[]")]),a._v(" CQ 码数组")])]),a._v(" "),t("h2",{attrs:{id:"输出日志"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#输出日志"}},[a._v("#")]),a._v(" 输出日志")]),a._v(" "),t("h3",{attrs:{id:"new-logger"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#new-logger"}},[a._v("#")]),a._v(" new Logger(name)")]),a._v(" "),t("h3",{attrs:{id:"logger-error"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#logger-error"}},[a._v("#")]),a._v(" logger.error()")]),a._v(" "),t("h3",{attrs:{id:"logger-success"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#logger-success"}},[a._v("#")]),a._v(" logger.success()")]),a._v(" "),t("h3",{attrs:{id:"logger-warn"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#logger-warn"}},[a._v("#")]),a._v(" logger.warn()")]),a._v(" "),t("h3",{attrs:{id:"logger-info"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#logger-info"}},[a._v("#")]),a._v(" logger.info()")]),a._v(" "),t("h3",{attrs:{id:"logger-debug"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#logger-debug"}},[a._v("#")]),a._v(" logger.debug()")]),a._v(" "),t("h2",{attrs:{id:"随机数操作"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#随机数操作"}},[a._v("#")]),a._v(" 随机数操作")]),a._v(" "),t("h3",{attrs:{id:"random-uuid"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#random-uuid"}},[a._v("#")]),a._v(" Random.uuid()")]),a._v(" "),t("p",[a._v("生成一个标准的 UUID (v5)。")]),a._v(" "),t("ul",[t("li",[a._v("返回值: "),t("code",[a._v("string")]),a._v(" 生成的 UUID")])]),a._v(" "),t("h3",{attrs:{id:"random-bool"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#random-bool"}},[a._v("#")]),a._v(" Random.bool(probability)")]),a._v(" "),t("p",[a._v("生成一个随机布尔值，有 probability 的概率为 1。")]),a._v(" "),t("ul",[t("li",[t("strong",[a._v("probability:")]),a._v(" "),t("code",[a._v("number")]),a._v(" 概率")]),a._v(" "),t("li",[a._v("返回值: "),t("code",[a._v("boolean")]),a._v(" 随机布尔值")])]),a._v(" "),t("h3",{attrs:{id:"random-real"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#random-real"}},[a._v("#")]),a._v(" Random.real(start?, end)")]),a._v(" "),t("p",[a._v("生成一个随机实数。")]),a._v(" "),t("ul",[t("li",[t("strong",[a._v("start:")]),a._v(" "),t("code",[a._v("number")]),a._v(" 下界，默认为 0")]),a._v(" "),t("li",[t("strong",[a._v("end:")]),a._v(" "),t("code",[a._v("end")]),a._v(" 上界")]),a._v(" "),t("li",[a._v("返回值: "),t("code",[a._v("number")]),a._v(" 一个 [start, end) 之间的随机实数")])]),a._v(" "),t("h3",{attrs:{id:"random-int"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#random-int"}},[a._v("#")]),a._v(" Random.int(start?, end)")]),a._v(" "),t("p",[a._v("生成一个随机实数。")]),a._v(" "),t("ul",[t("li",[t("strong",[a._v("start:")]),a._v(" "),t("code",[a._v("number")]),a._v(" 下界，默认为 0")]),a._v(" "),t("li",[t("strong",[a._v("end:")]),a._v(" "),t("code",[a._v("end")]),a._v(" 上界")]),a._v(" "),t("li",[a._v("返回值: "),t("code",[a._v("number")]),a._v(" 一个 [start, end) 之间的随机整数")])]),a._v(" "),t("h3",{attrs:{id:"random-shuffle"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#random-shuffle"}},[a._v("#")]),a._v(" Random.shuffle(array)")]),a._v(" "),t("p",[a._v("随机打乱数组中的元素，返回新的数组。")]),a._v(" "),t("ul",[t("li",[t("strong",[a._v("array:")]),a._v(" "),t("code",[a._v("T[]")]),a._v(" 数组")]),a._v(" "),t("li",[a._v("返回值: "),t("code",[a._v("T[]")]),a._v(" 新的数组")])]),a._v(" "),t("h3",{attrs:{id:"random-pick"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#random-pick"}},[a._v("#")]),a._v(" Random.pick(array)")]),a._v(" "),t("p",[a._v("从数组中随机挑出一个元素，不改变原数组。")]),a._v(" "),t("ul",[t("li",[t("strong",[a._v("array:")]),a._v(" "),t("code",[a._v("readonly T[]")]),a._v(" 数组")]),a._v(" "),t("li",[a._v("返回值: "),t("code",[a._v("T")]),a._v(" 挑出的元素")])]),a._v(" "),t("h3",{attrs:{id:"random-multipick"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#random-multipick"}},[a._v("#")]),a._v(" Random.multiPick(array, count)")]),a._v(" "),t("p",[a._v("从数组中随机挑出一些元素，不改变原数组。")]),a._v(" "),t("ul",[t("li",[t("strong",[a._v("array:")]),a._v(" "),t("code",[a._v("readonly T[]")]),a._v(" 数组")]),a._v(" "),t("li",[t("strong",[a._v("count:")]),a._v(" "),t("code",[a._v("number")]),a._v(" 元素个数")]),a._v(" "),t("li",[a._v("返回值: "),t("code",[a._v("T[]")]),a._v(" 挑出的元素列表")])]),a._v(" "),t("h3",{attrs:{id:"random-weightedpick"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#random-weightedpick"}},[a._v("#")]),a._v(" Random.weightedPick(weights, value?)")]),a._v(" "),t("p",[a._v("按照权重随机挑出一个元素。")]),a._v(" "),t("ul",[t("li",[t("strong",[a._v("weights:")]),a._v(" "),t("code",[a._v("Record<T, number>")]),a._v(" 权重表")]),a._v(" "),t("li",[t("strong",[a._v("value:")]),a._v(" "),t("code",[a._v("number")]),a._v(" 一个 0 到 1 之间的随机数，默认为 "),t("code",[a._v("Math.random()")])]),a._v(" "),t("li",[a._v("返回值: "),t("code",[a._v("T")]),a._v(" 挑出的元素")])]),a._v(" "),t("h2",{attrs:{id:"其他工具函数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#其他工具函数"}},[a._v("#")]),a._v(" 其他工具函数")]),a._v(" "),t("h3",{attrs:{id:"noop"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#noop"}},[a._v("#")]),a._v(" noop()")]),a._v(" "),t("p",[a._v("不进行任何操作（no operation）。")]),a._v(" "),t("ul",[t("li",[a._v("返回值: "),t("code",[a._v("void")])])]),a._v(" "),t("h3",{attrs:{id:"sleep"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#sleep"}},[a._v("#")]),a._v(" sleep(ms?)")]),a._v(" "),t("p",[a._v("等待一段时间。")]),a._v(" "),t("ul",[t("li",[t("strong",[a._v("ms:")]),a._v(" "),t("code",[a._v("number")]),a._v(" 要等待的毫秒数")]),a._v(" "),t("li",[a._v("返回值: "),t("code",[a._v("Promise<void>")])])]),a._v(" "),t("h3",{attrs:{id:"isinteger"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#isinteger"}},[a._v("#")]),a._v(" isInteger(value)")]),a._v(" "),t("p",[a._v("判断传入的值是否为整数。")]),a._v(" "),t("ul",[t("li",[t("strong",[a._v("value:")]),a._v(" "),t("code",[a._v("any")]),a._v(" 要判断的值")]),a._v(" "),t("li",[a._v("返回值: "),t("code",[a._v("boolean")]),a._v(" 是否为整数")])])],1)}),[],!1,null,null,null);v.default=e.exports}}]);